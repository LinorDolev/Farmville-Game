{"version":3,"sources":["serviceWorker.js","App/Home/Home.js","services/UserService.js","components/login/Login.js","components/register/RegistrationForm.js","components/playground/components/Cell.js","components/playground/components/Board.js","components/playground/components/Game.js","components/playground/MessageBoard/MessageBoard.js","components/playground/MessageBoard/MessageBoardPopOver.js","components/playground/SendMessageForm/SendMessageForm.js","components/playground/ManagerPlayground.js","components/playground/Playground.js","Routes/Routes.js","App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","react_default","a","createElement","className","Component","UserService","getResponse","arguments","length","undefined","res","getBody","body","Object","classCallCheck","this","url","registrationForm","_this","fetch","method","JSON","stringify","headers","Content-Type","Accept","Access-Control-Allow-Origin","Access-Control-Allow-Methods","then","response","console","log","json","credentials","_this2","playground","email","color","name","x","y","_this3","activityTO","id","elementPlayground","elementId","type","playerPlayground","playerEmail","attributes","COLOR","NAME","X","Y","catch","reason","alert","_this4","ElementTO","creatorPlayground","creatorEmail","visible","creationDate","Date","expirationDate","message","messageBoardId","_this5","MESSAGE","_this6","messages","message1","content","title","creationTime","Login","props","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","value","state","goToPlayground","user","preventDefault","userService","ok","loginUser","getElements","history","push","pathname","elements","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","onChange","Button","block","disabled","validateForm","onClick","handleSubmit","bind","withRouter","RegistrationForm","username","avatar","role","goHome","toLowerCase","registerUser","Redirect","to","onSubmit","RegistrationForm_MultipleOptionsRadio","options","split","size","MultipleOptionsRadio","_React$Component","selected","inherits","createClass","key","changeEvent","selectedOption","isSelected","map","index","activeIfSelected","style","fontSize","checked","handleOptionChangeWithId","data-toggle","React","Cell","emoji","_this$props","cMenu","isHarvested","isPlanted","isFlagged","onContextMenu","getValue","Board","plants","points","onPlant","assertThisInitialized","boardData","initBoardData","height","width","farmPoints","plantInfo","updatedData","emojis","randEmoji","Math","floor","random","plant","e","data","datarow","dataitem","Cell_Cell","handleCellClick","handleContextMenu","renderBoard","createEmptyArray","putPlants","i","j","neighbour","isEmpty","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","Game","_this$state","Board_Board","MessageBoard","moment","fromNow","messagesToItems","MessageBoardPopOver","messageBoard","popoverOpen","placement","text","readMessages","MESSAGES","es_Button","refreshMessages","Popover","isOpen","toggle","PopoverHeader","aria-label","PopoverBody","MessageBoard_MessageBoard_MessageBoard","SendMessageForm","placeholder","componentClass","ManagerPlayground","boardId","parse","localStorage","getItem","setItem","createMessageBoard","writeMessage","messageBoardBtn","createBoard","SendMessageForm_SendMessageForm_SendMessageForm","onSubmitMessage","Playground","filter","element","toString","getMessageBoardIfExists","messagesBoards","date","getMilliseconds","messageBoardPopOver","MessageBoard_MessageBoardPopOver","Game_Game","ManagerPlayground_ManagerPlayground","messageBoardComponent","userHeader","Routes","Switch","Route","exact","path","component","App","BrowserRouter","Navbar","Header","Brand","Link","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c5450f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' || window.location.hostname === '0.0.0.0' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Home.css\";\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div className=\"Home\">\n                <div className=\"lander\">\n                    <h1>\n                        <span className={\"info1\"}>Farm</span>\n                        <span className={\"info2\"}>Ground</span>\n                    </h1>\n                    <p>The fascinating experience of being a farmer!</p>\n                </div>\n            </div>\n        );\n    }\n}","import fetch from 'isomorphic-fetch'\n\n\nexport default class UserService {\n\n    constructor(getResponse=(res) =>{return res;}, getBody=(body)=>{return body;}){\n        this.getResponse = getResponse;\n        this.getBody = getBody;\n\n         this.url = \"http://localhost:8083\";\n        //this.url = \"http://10.100.102.75:8083\";\n\n    }\n\n\n    registerUser(registrationForm){\n        let url = this.url + \"/playground/users\";\n\n        fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(registrationForm),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }).then(response => {\n            console.log(response);\n            this.getResponse(response);\n            return response.json();\n        }).then(body => {\n            console.log(body);\n            this.getBody(body);\n        });\n    }\n\n    loginUser(credentials){\n        let url = this.url + \"/playground/users/login/\"+credentials.playground+\"/\"+credentials.email;\n\n        /*\n        ,{\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }\n         */\n       return fetch(url).then(response => {\n            //console.log(response);\n            this.getResponse(response);\n            return response.json();\n        }).then(body => {\n            //console.log(body);\n            this.getBody(body);\n            return body;\n        });\n\n\n    }\n\n    getElements(credentials){\n        let url = this.url + \"/playground/elements/\"+ credentials.playground +\"/\" + credentials.email +\"/all\";\n\n        return fetch(url,{\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }).then(response => {\n            return response.json();\n        });\n\n    }\n\n\n    /**\n     *\n     private String playground;\n     private String id;\n     private String elementPlayground;\n     private String elementId;\n     private String type;\n     private String playerPlayground;\n     private String playerEmail;\n     private Map<String, Object> attributes;\n     *\n     * */\n    plant(credentials, color, name, x, y){\n        let url = this.url + \"/playground/activities/\" +  credentials.playground + \"/\" + credentials.email;\n\n        let activityTO = {\n            playground: credentials.playground,\n            id: \"\",\n            elementPlayground: credentials.playground,\n            elementId: \"\",\n            type:\"Plant\",\n            playerPlayground: credentials.playground,\n            playerEmail: credentials.email,\n            attributes: {\n                COLOR: color,\n                NAME: name,\n                X: x,\n                Y: y\n            }\n        };\n\n        return fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(activityTO),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }).then(response => {\n           // console.log(response);\n            this.getResponse(response);\n            return response.json();\n        }).then(body => {\n            //console.log(body);\n            return this.getBody(body);\n        }).catch((reason => alert(reason)));\n    }\n\n\n    createMessageBoard(credentials){\n        let url = this.url + \"/playground/elements/\" +  credentials.playground + \"/\" + credentials.email;\n\n        let ElementTO = {\n            playground: credentials.playground,\n            id: \"\",\n            type:\"MessagesBoard\",\n            name:\"Messages Board\",\n            location:{\n                x: 0.0,\n                y: 0.0\n            },\n            creatorPlayground:credentials.playground,\n            creatorEmail:credentials.email,\n            attributes: {\n                visible: true\n            },\n            creationDate: new Date(),\n            expirationDate:\"\"\n        };\n\n        return fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(ElementTO),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }).then(response => {\n            console.log(response);\n            this.getResponse(response);\n            return response.json();\n        }).then(body => {\n            console.log(body);\n            return this.getBody(body);\n        }).catch((reason => alert(reason)));\n    }\n\n    writeMessage(credentials, message, messageBoardId){\n        let url = this.url + \"/playground/activities/\" +  credentials.playground + \"/\" + credentials.email;\n\n        let activityTO = {\n            playground: credentials.playground,\n            id: \"\",\n            elementPlayground: credentials.playground,\n            elementId: messageBoardId,\n            type:\"WriteMessage\",\n            playerPlayground: credentials.playground,\n            playerEmail: credentials.email,\n            attributes: {\n                MESSAGE: message\n            }\n        };\n\n        return fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(activityTO),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }).then(response => {\n            console.log(response);\n            this.getResponse(response);\n            return response.json();\n        }).then(body => {\n            console.log(body);\n            return this.getBody(body);\n        }).catch((reason => alert(reason)));\n    }\n\n    readMessages(credentials, messageBoardId){\n        let url = this.url + \"/playground/activities/\" +  credentials.playground + \"/\" + credentials.email;\n\n        let activityTO = {\n            playground: credentials.playground,\n            id: \"\",\n            elementPlayground: credentials.playground,\n            elementId: messageBoardId,\n            type:\"ReadRecentMessages\",\n            playerPlayground: credentials.playground,\n            playerEmail: credentials.email,\n            attributes: {\n                messages: {\n                    message1: [{\n                        content:\"\",\n                        title: \"\",\n                        creationTime: \"\"}]\n                }\n            }\n        };\n\n        return fetch(url,{\n            method: 'POST',\n            body: JSON.stringify(activityTO),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Allow-Methods' :'POST, GET, DELETE, PUT'\n            }\n        }).then(response => {\n            // console.log(response);\n            this.getResponse(response);\n            return response.json();\n        }).then(body => {\n            //console.log(body);\n            return this.getBody(body);\n        }).catch((reason => alert(reason)));\n    }\n}","import React, { Component } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./Login.css\";\nimport UserService from '../../services/UserService'\n\nimport {withRouter} from \"react-router-dom\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            playground: \"\",\n            response:null,\n            goToPlayground:false,\n            user:null,\n        };\n\n    }\n\n    validateForm() {\n        return this.state.email.length > 0 && this.state.playground.length > 0;\n    }\n\n    handleChange = event => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    };\n\n    handleSubmit(event){\n        event.preventDefault();\n        let credentials = {\n            email: this.state.email,\n            playground: this.state.playground\n        };\n\n        let getRes = (res) => {\n            this.setState({response:res});\n\n        };\n\n        let getBody = (body) => {\n\n            if(this.state.response.ok === true) {\n                this.setState({\n                    goToPlayground: true,\n                    user: body\n                });\n\n            }else{\n                alert(\"Cannot log in:\");\n            }\n        };\n\n        let userService = new UserService(getRes, getBody);\n        userService.loginUser(credentials);\n        userService.getElements(credentials).then(body =>{\n\n            if(this.state.goToPlayground) {\n                this.props.history.push({\n                    pathname: '/playground',\n                    state: {\n                        user: this.state.user,\n                        elements: body\n                    }\n                });\n            }\n        });\n\n    };\n\n    render() {\n\n        return (\n            <div className=\"Login\">\n                <form>\n                    <FormGroup controlId=\"email\" bsSize=\"large\">\n                        <ControlLabel>Email</ControlLabel>\n                        <FormControl\n                            autoFocus\n                            type=\"email\"\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"playground\" bsSize=\"large\">\n                        <ControlLabel>Playground</ControlLabel>\n                        <FormControl\n                            value={this.state.playground}\n                            onChange={this.handleChange}\n                            type=\"text\"\n                        />\n                    </FormGroup>\n                    <Button\n                        block\n                        bsSize=\"large\"\n                        disabled={!this.validateForm()}\n                        type=\"button\"\n                        onClick={this.handleSubmit.bind(this)}\n                    >\n                        Login\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Login);","import React, { Component } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./RegistrationForm.css\";\nimport UserService from '../../services/UserService'\nimport {Redirect} from \"react-router\";\n\n/** email, playground, username, avatar, role */\nexport default class RegistrationForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            playground: \"\",\n            username:\"\",\n            avatar:\"\",\n            role:\"\",\n            ok:false,\n            goHome:false\n        };\n    }\n\n    validateForm() {\n        // return true;\n        return this.state.email.length > 0 && this.state.playground.length > 0 && this.state.username.length > 0 && this.state.avatar.length > 0\n            && this.state.role.length > 0 ;\n    }\n\n    handleChange = event => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n        return event\n    };\n\n    handleSubmit(event){\n        event.preventDefault();\n\n        let registrationForm ={\n            email: this.state.email,\n            username: this.state.username,\n            avatar: this.state.avatar,\n            role: this.state.role.toLowerCase(),\n            playground: this.state.playground\n        };\n\n        console.log(\"Posting: \" + JSON.stringify(registrationForm));\n\n        let getResponse = (res) => {\n            this.setState({\n                ok: res.ok\n            });\n        };\n        let getBody = (body) => {\n            if(this.state.ok){\n                this.setState({\n                    goHome: true\n                });\n            }else{\n                alert(body.message);\n            }\n        };\n\n        let userService = new UserService(getResponse, getBody);\n        userService.registerUser(registrationForm);\n    };\n\n    render() {\n\n        if(this.state.goHome){\n            alert(\"A confirmation email was sent to: \" + this.state.email + \", you must confirm your email before logging into FarmGround\");\n            return <Redirect to='/' />\n        }\n        return (\n            <div className=\"Registration\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <FormGroup controlId=\"email\" bsSize=\"large\">\n                        <ControlLabel>Email</ControlLabel>\n                        <FormControl\n                            autoFocus\n                            type=\"email\"\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"playground\" bsSize=\"large\">\n                        <ControlLabel>Playground</ControlLabel>\n                        <FormControl\n                            value={this.state.playground}\n                            onChange={this.handleChange}\n                            type=\"text\"\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"username\" bsSize=\"large\">\n                        <ControlLabel>Username</ControlLabel>\n                        <FormControl\n                            value={this.state.username}\n                            onChange={this.handleChange}\n                            type=\"text\"\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"avatar\" bsSize=\"large\">\n                        <ControlLabel>Avatar</ControlLabel>\n\n                        <MultipleOptionsRadio\n                            options={\"👩‍🌾 👨‍🌾 👩🏻‍🌾 👨🏻‍🌾 👩🏼‍🌾 👨🏼‍🌾 👩🏽‍🌾 👨🏽‍🌾 👩🏾‍🌾 👨🏾‍🌾 👩🏿‍🌾 👨🏿‍🌾\".split(\" \")}\n                            onChange={(value) => this.setState({avatar:value})}\n                            size={\"40px\"}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"role\" bsSize=\"large\">\n                        <ControlLabel>Role</ControlLabel>\n                        <br/>\n                        <MultipleOptionsRadio options={[\"Player\", \"Manager\"]} onChange={(value) => this.setState({role:value})}/>\n\n\n                    </FormGroup>\n                    <Button\n                        block\n                        bsSize=\"large\"\n                        disabled={!this.validateForm()}\n                        // type=\"submitgg\"\n                        onClick={this.handleSubmit.bind(this)}\n                    >\n                        Register\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n}\n\n\n\nexport class MultipleOptionsRadio extends React.Component{\n\n    constructor(props) {\n        super();\n        this.state = {\n            selected: \"option1\",\n            onChange: props.onChange,\n            options: props.options,\n            size: props.size ? props.size : \"18px\"\n        }\n    }\n\n    handleOptionChangeWithId(changeEvent, value) {\n        this.setState({\n            selectedOption: changeEvent.target.id,\n        });\n        this.state.onChange(value);\n        return value\n    }\n\n\n\n    isSelected(value){\n        return this.state.selectedOption === value;\n    }\n\n    activeIfSelected(value){\n        if(this.isSelected(value)){\n            return \" active\";\n        }\n        return \"\";\n    }\n\n    render(){\n        let transforms = this.state.options;\n\n        let options = transforms.map((value, index) => {\n            return <label className={\"btn btn-secondary\"+ this.activeIfSelected(\"option\"+index)} key={index} style={{fontSize: this.state.size}}>\n                <input type=\"radio\"\n                       name=\"options\"\n                       id={\"option\"+index}\n                       checked={this.isSelected(\"option\"+index)}\n                       onChange={(event) => this.handleOptionChangeWithId(event, value)}/>\n                {value}\n            </label>\n        });\n\n        return(\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                {options}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Cell extends React.Component {\n    getValue() {\n        const { value } = this.props;\n\n        return value.emoji;\n    }\n\n    render() {\n        const { value, onClick, cMenu } = this.props;\n        let className =\n            \"cell\" +\n            (value.isHarvested ? \"\" : \" hidden\") +\n            (value.isPlanted ? \" is-mine\" : \" is-mine\") +\n            (value.isFlagged ? \" is-flag\" : \"\");\n\n        return (\n            <div\n                onClick={onClick}\n                className={className}\n                onContextMenu={cMenu}\n            >\n                {this.getValue()}\n            </div>\n        );\n    }\n}\n\nconst cellItemShape = {\n    isHarvested: PropTypes.bool,\n    isPlanted: PropTypes.bool,\n    isFlagged: PropTypes.bool\n}\n\nCell.propTypes = {\n    value: PropTypes.objectOf(PropTypes.shape(cellItemShape)),\n    onClick: PropTypes.func,\n    cMenu: PropTypes.func\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\nimport UserService from \"../../../services/UserService\";\n\nexport default class Board extends React.Component {\n\n\n    constructor(props){\n        super(props);\n        let plants = this.props.plants;\n        let points = this.props.points;\n        let user = props.user ? props.user : null;\n        let userService = new UserService((res) => {\n\n        }, this.onPlant.bind(this));\n\n        console.log(\"CONSTRUCTOR:: plants - \" + JSON.stringify(plants));\n        this.state = {\n            plants: plants,\n            boardData: Board.initBoardData(this.props.height, this.props.width, plants),\n            farmPoints: points,\n            userService: userService,\n            user: user\n        };\n\n    }\n    // Gets initial board data\n    static initBoardData(height, width, plants) {\n        let data = Board.createEmptyArray(height, width);\n        data = Board.putPlants(data, height, width, plants);\n        return data;\n    }\n\n\n    static createEmptyArray(height, width) {\n        let data = [];\n\n        for (let i = 0; i < height; i++) {\n            data.push([]);\n            for (let j = 0; j < width; j++) {\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isPlanted: false,\n                    neighbour: 0,\n                    isHarvested: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                    emoji: \"\"\n                };\n            }\n        }\n\n\n        return data;\n    }\n\n    // plant farmPoints on the board\n    static putPlants(data, height, width, plants) {\n\n        let updatedData = data;\n\n\n        console.log(\"*** INIT PLANTS BEFORE LOOP: \" + JSON.stringify(plants));\n\n        for(let plant of plants){\n            let x = plant.location.x;\n            let y = plant.location.y;\n            let emoji = plant.attributes.COLOR;\n\n            updatedData[x][y].isPlanted = true;\n            updatedData[x][y].emoji = emoji;\n            updatedData[x][y].x = x;\n            updatedData[x][y].y = y;\n        }\n\n        return updatedData;\n    }\n\n    onPlant(plantInfo){\n\n        let x = plantInfo.attributes.X;\n        let y = plantInfo.attributes.Y;\n        let points = plantInfo.attributes.points;\n\n        let updatedData = this.state.boardData;\n        updatedData[x][y].isPlanted = true;\n        updatedData[x][y].emoji = plantInfo.attributes.COLOR;\n        updatedData[x][y].x = x;\n        updatedData[x][y].y = y;\n        //TODO -> ADD EMOJI ATTRIBUTE\n        this.setState({\n            boardData: updatedData,\n            farmPoints: points\n        });\n    }\n\n    // Handle User Events\n    /** left cursor action **/\n    handleCellClick(x, y) {\n\n        // check if revealed. return if true.\n        if (this.state.boardData[x][y].isHarvested || this.state.boardData[x][y].isFlagged)\n            return null;\n\n        let emojis = [[\"🍆\", \"eggplant\"], [\"🍅\", \"Tomato\"],\n            [\"🌶\", \"Red hot chili pepper\"], [\"🌽\", \"Corn\"],\n            [\"🥭\", \"Mango\"], [\"🍓\", \"Strawberry\"], [\"🍒\", \"Cherry\"], [\"🍎\", \"Apple\"],\n            [\"🍊\",\"Orange\"], [\"🍐\", \"Pear\"],\n            [\"🥬\", \"Lettuce\"], [\"🥕\", \"Carrot\"]\n            , [\"🍇\", \"Grapes\"], [\"🍑\", \"Peach\"], [\"🥔\", \"Potato\"]];\n\n        var randEmoji = emojis[Math.floor(Math.random() * emojis.length)];\n\n\n        if(!this.state.boardData[x][y].isPlanted) {\n\n            let userService = this.state.userService;\n\n            userService.plant(this.state.user, randEmoji[0], randEmoji[1], x, y);\n        }\n    }\n\n\n    /** right cursor action **/\n    handleContextMenu(e, x, y) {\n        e.preventDefault();\n        console.log(e + \"$x $y\", x, y)\n    }\n\n    renderBoard(data) {\n        return data.map((datarow) => {\n            return datarow.map((dataitem) => {\n                return (\n                    <div id={dataitem.x * datarow.length + dataitem.y} key={dataitem.x * datarow.length + dataitem.y}>\n                        <Cell\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n                            cMenu={(e) => this.handleContextMenu(e, dataitem.x, dataitem.y)}\n                            value={dataitem}\n                        />\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n                    </div>);\n            })\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"game-info\">\n                    <span className=\"info\">Points: {this.state.farmPoints}</span>\n                    <h1 id={\"title\"}>\n                    <span className=\"info1\">{\"Farm\"}</span>\n                    <span className=\"info2\">{\"Ground\"}</span>\n                    </h1>\n                </div>\n                <div className={\"actualLands\"}>\n                    {\n                        this.renderBoard(this.state.boardData)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nBoard.propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    mines: PropTypes.number,\n};","import React from 'react';\nimport Board from './Board';\nimport './style.scss';\n\nexport default class Game extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.props = props;\n        this.state = {\n            height: 6,\n            width: 10,\n            farmPoints: this.props.user ? this.props.user.points : 0,\n            user: this.props.user,\n            plants: this.props.plants\n        };\n        console.log(\"In Game plants:\" + JSON.stringify(this.state.plants));\n\n    }\n\n    render() {\n        const { height, width, farmPoints, user, plants } = this.state;\n        return (\n            <div className=\"game\">\n                <Board height={height} width={width} points={farmPoints} plants={plants} user={user}/>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport './MessageBoard.css';\nimport * as moment from 'moment';\n\nexport default class MessageBoard extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.props = props;\n\n        this.state ={\n            messages: this.props.messages ? this.props.messages : [\n                {\n                    title: \"Welcome to Farmground!\",\n                    creationTime: \"10:24\",\n                    content:\"We wish you a nice farming experience!\"\n                },\n                {\n                    title: \"Hello Again!\",\n                    creationTime: \"14:10\",\n                    content:\"Its good to see your'e back!\"\n                },\n                {\n                    title: \"Good job on the tomatoes!\",\n                    creationTime: \"20:10\",\n                    content:\"We see your hard work and appreciate it, continue this way\"\n                }]\n        }\n    }\n\n\n    messagesToItems(){\n        let messages = this.state.messages;\n\n        return messages.map((message, index) =>{\n            return(<p  key={index} className=\"list-group-item list-group-item-action flex-column align-items-start\">\n                        <div className=\"d-flex w-100 justify-content-between\">\n                            <h5 className=\"mb-1\"> {message.title} </h5>\n                            <small>{moment(message.creationTime,\"x\").fromNow()}</small>\n                        </div>\n                        <p className=\"mb-1\"> {message.content} </p>\n                        <small>Sent by FarmGround management</small>\n                    </p>);\n        });\n\n    }\n\n\n    render() {\n        return (\n                <div id=\"messageBoard\" className=\"list-group\">\n                    {this.messagesToItems()}\n                </div>\n        );\n    }\n}\n","\nimport React from 'react';\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\nimport MessageBoard from \"./MessageBoard\";\nimport UserService from \"../../../services/UserService\";\n\nclass MessageBoardPopOver extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.user,\n            messageBoard: this.props.messageBoard,\n            messages: [],\n            popoverOpen: false,\n            placement: 'top',\n            text: '📥 Message Board'\n\n        };\n    }\n\n    toggle() {\n        this.setState({\n            popoverOpen: !this.state.popoverOpen\n        });\n    }\n\n    refreshMessages(event){\n        event.preventDefault();\n\n        let userService = new UserService();\n        let messageBoard = this.state.messageBoard;\n        userService.readMessages({\n            email: this.state.user.email,\n            playground: this.state.user.playground\n        }, messageBoard.id).then(body => {\n            this.setState({\n                messages: body.attributes.MESSAGES\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className={\"float-right\"}>\n                <span>\n                    <Button className=\"messageBoardButton mr-1\" color=\"success\" id={'Popover-MessageBoard'} type=\"button\" onClick={this.refreshMessages.bind(this)}>\n                        {this.state.text}\n                    </Button>\n                    <Popover placement={this.state.placement} isOpen={this.state.popoverOpen} target={'Popover-MessageBoard'} toggle={this.toggle.bind(this)}>\n                        <PopoverHeader>\n                            <span role=\"img\" aria-label={\"Message logo\"}>📩</span> Message Board\n                        </PopoverHeader>\n                        <PopoverBody>\n                            <MessageBoard messages={this.state.messages}/>\n                        </PopoverBody>\n                    </Popover>\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default MessageBoardPopOver;\n","import React, { Component } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./SendMessageForm.css\";\n\n\n/** title, content */\nexport default class SendMessageForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.user,\n            title: \"\",\n            content:\"\",\n            onSubmit: this.props.onSubmit\n        };\n    }\n\n    validateForm() {\n        return this.state.title.length > 0 && this.state.content.length > 0;\n    }\n\n    handleChange = event => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n        return event\n    };\n\n    handleSubmit(event){\n        this.state.onSubmit(this.state.title, this.state.content);\n    };\n\n    render() {\n        return (\n            <div className=\"SendMessageForm\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <FormGroup controlId=\"title\" bsSize=\"large\">\n                        <ControlLabel>Title</ControlLabel>\n                        <FormControl\n                            autoFocus\n                            placeholder=\"Insert a title\"\n                            type=\"text\"\n                            value={this.state.title}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"content\" bsSize=\"large\">\n                        <ControlLabel >Message Content</ControlLabel>\n                        <FormControl\n                            componentClass=\"textarea\"\n                            placeholder=\"Type your message here...\"\n                            value={this.state.content}\n                            onChange={this.handleChange}\n                            type=\"text\"\n                        />\n                    </FormGroup>\n\n                    <Button\n                        block\n                        bsSize=\"large\"\n                        disabled={!this.validateForm()}\n                        // type=\"submitgg\"\n                        onClick={this.handleSubmit.bind(this)}\n                    >\n                        Publish Message\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Button} from \"reactstrap\";\nimport SendMessageForm from \"./SendMessageForm/SendMessageForm\";\nimport UserService from \"../../services/UserService\";\n\nexport default class ManagerPlayground extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            user: props.user,\n            boardId: this.props.messageBoard ? this.props.messageBoard.id : undefined,\n        };\n        this.userService = new UserService();\n    }\n\n\n    componentWillMount(){\n\n        let boardId = JSON.parse(localStorage.getItem(\"boardId\"));\n        if(boardId){\n            this.setState({\n                boardId: boardId\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        if(this.state.boardId !== undefined) {\n            localStorage.setItem(\"boardId\", JSON.stringify(this.state.boardId));\n        }\n    }\n\n    createBoard(){\n        // if(this.state.boardId !== undefined) {\n            this.userService.createMessageBoard({\n               email: this.state.user.email,\n               playground: this.state.user.playground\n            }).then(body => {\n                this.setState({\n                    boardId: body.elementId\n                });\n                console.log(JSON.stringify(body));\n                if(this.state.boardId !== undefined) {\n                    localStorage.setItem(\"boardId\", JSON.stringify(this.state.boardId));\n                }\n            });\n        // }\n\n    }\n\n    onSubmitMessage(title, content){\n        this.userService.writeMessage({\n            email: this.state.user.email,\n            playground: this.state.user.playground\n        }, {\n            title: title,\n            content: content\n        },\n            this.state.boardId\n        );\n    }\n\n    render(){\n        let messageBoardBtn = (<Button className={\"messageBoardButton btn btn-info float-right\"} onClick={this.createBoard.bind(this)}>\n            Add Message Board\n        </Button>);\n\n        return(\n            <div>\n                {messageBoardBtn}\n                <br/>\n                <br/>\n                <SendMessageForm onSubmit={this.onSubmitMessage.bind(this)}/>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport './Playground.css'\nimport Game from './components/Game'\nimport {withRouter} from 'react-router-dom'\nimport MessageBoardPopOver from \"./MessageBoard/MessageBoardPopOver\";\n\nimport ManagerPlayground from \"./ManagerPlayground\";\n\nclass Playground extends Component {\n\n    constructor(props){\n        super();\n\n        this.state = {\n            user: props.location.state !== undefined ? props.location.state.user : undefined,\n            ok: false,\n            plants: props.location.state.elements.filter(element => element.type.toString().toLowerCase() === 'plant'),\n            messageBoard: props.location.state !== undefined ? this.getMessageBoardIfExists(props.location.state.elements) : undefined,\n            props: props\n        };\n\n    }\n\n    getMessageBoardIfExists(elements){\n        let messagesBoards = elements.filter(element => element.type.toString().toLowerCase() === 'messagesboard');\n\n        if(messagesBoards.length > 0){\n            return messagesBoards[0];\n        }\n\n        return undefined;\n    }\n\n    componentDidMount(){\n        if(this.props.location.state){\n            localStorage.setItem(\"user\", JSON.stringify(this.props.location.state.user));\n        }else{\n            this.setState({\n                user: JSON.parse(localStorage.getItem(\"user\"))\n            });\n        }\n\n\n    }\n\n    render() {\n        let date = new Date();\n        console.log(date + \" \" + date.getMilliseconds() + \" In Playground user:\" + JSON.stringify(this.state.user));\n        console.log(date + \" \" + date.getMilliseconds() +\" In Playground plants:\" + JSON.stringify(this.state.plants));\n\n        let content = <br/>;\n\n        let messageBoardPopOver = <br/>;\n\n\n        if(this.state.messageBoard) {\n            messageBoardPopOver = <MessageBoardPopOver id={\"messageBoard\"} user={this.state.user}\n                                                       messageBoard={this.state.messageBoard}/>;\n        }\n\n        if(this.state.user !== undefined && this.state.user.role.toString().toLowerCase() === \"player\"){\n            content = <Game user={this.state.user} plants={this.state.plants}/>;\n        }else if(this.state.user !== undefined && this.state.user.role.toString().toLowerCase() === \"manager\"){\n            content = <ManagerPlayground user={this.state.user} messageBoard={this.state.messageBoard} messageBoardComponent={messageBoardPopOver}/>;\n        }\n\n        let userHeader = this.state.user ? <h2> {this.state.user.avatar} {this.state.user.username}</h2> : <br/>;\n\n        return (\n          <div id={\"playgroundSC\"} className={\"container\"}>\n              {messageBoardPopOver}\n              {userHeader}\n              {content}\n          </div>\n        );\n    }\n}\n\nexport default withRouter(Playground);","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"../App/Home/Home\";\nimport Login from \"../components/login/Login\";\nimport RegistrationForm from \"../components/register/RegistrationForm\";\nimport Playground from \"../components/playground/Playground\";\n\nexport default () =>\n    <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/login\"  component={Login} />\n        <Route exact path=\"/register\" component={RegistrationForm} />\n        <Route exact path=\"/playground\" component={Playground} />\n    </Switch>;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Routes from \"../Routes/Routes\";\nimport { BrowserRouter } from 'react-router-dom'\n\nclass App extends Component {\n    render() {\n        return (\n            <div id={\"whole\"}>\n            <div>\n                <BrowserRouter>\n                    <div>\n                        <Navbar className={\"fluid collapseOnSelect\"}>\n\n                            <Navbar.Header>\n                                <Navbar.Brand>\n                                    <Link className=\"btn btn-success\" to={\"/\"}>\n                                            <span className={\"info1\"}>Farm</span>\n                                            <span className={\"info2\"}>Ground</span>\n                                    </Link>\n                                </Navbar.Brand>\n\n                                <Navbar.Brand>\n                                    <Link className=\"btn btn-warning\" to={\"/login\"}>Login</Link>\n                                </Navbar.Brand>\n                                <Navbar.Brand>\n                                    <Link className=\"btn btn-primary\" to={\"/register\"}>Sign-Up</Link>\n                                </Navbar.Brand>\n                            </Navbar.Header>\n                        </Navbar>\n\n                    <Routes/>\n                    </div>\n                </BrowserRouter>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App/App'\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}